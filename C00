===============================================================================================================
Exercici 06
===============================================================================================================

#include <unistd.h>

void	ft_putchar (char c)
{
	write (1, &c, 1);
}

void	ft_printfirstnum(int x)
{
	char	n;
	
	n = (char) x;
	if (x < 10)
	{	
		ft_putchar('0');
		ft_putchar(n);
	}
	else
		ft_putchar(n);
	ft_putchar(' ');
}

void	ft_printsecondnum(int x)
{
	char	n;
	
	n = (char) x;
	if (x < 10)
	{	
		ft_putchar('0');
		ft_putchar(n);
	}
	else
		ft_putchar(n);
	if (x < 99)
		ft_putchar(', ');
}

void	ft_print_comb2(void)
{
	int	i;
	int	j;

	i = 0;
	while(i < 99)
	{
		ft_printfirstnum(i);
		j = i + 1;
		while (j <= 99)
		{
			ft_printsecondnum(j);
			j++;
		}
		i++;
	}
}

/* int main ()
{
	ft_print_comb2();
} */


===============================================================================================================
Exercici 07
===============================================================================================================

#include <unistd.h>
void	ft_putchar(char c)
{
	write(1, &c, 1);
}

/* Function that print on screen the integer writen in the main function:
   Because the max positive integer is 2147483647 we have to do a special
   work for the max negative -2147483648. We convert all negatives in 
   a positive but printing a '-' before. We reduce all numbers to a single 
   digit that we can print adding 48 to the digit (first position of 0 in 
   the ASCII table).*/
void	ft_putnbr(int nb)
{
	if (nb == -2147483648)
	{
		ft_putchar('-');
		ft_putchar('2');
		ft_putnbr(147483648);
	}
	else if (nb < 0)
	{
		ft_putchar('-');
		nb = -nb;
		ft_putnbr(nb);
	}
	else if (nb > 9)
	{
		ft_putnbr(nb / 10);
		ft_putnbr(nb % 10);
	}
	else
		 ft_putchar(nb + 48);
}
/*
int main (void)
{
	ft_putnbr(4563);
	ft_putchar('\n');
	ft_putnbr(-2147483648);
	ft_putchar('\n');
	ft_putnbr(42);
	ft_putchar('\n');
	ft_putnbr(2147483647);
	ft_putchar('\n');
	ft_putnbr(0);
	ft_putchar('\n');
	ft_putnbr(-5120);
	ft_putchar('\n');

}*/


===============================================================================================================
Exercici 08
===============================================================================================================

#include <unistd.h>

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

void ft_print_numbers(int comb[], int n)
{
	int i;
	char c;
	
	i = 0;
	while (i < n)
	{
		c = (char) comb[i];
		ft_putchar(c);
		i++;
	}
}

void ft_get_number(int comb[], int n)
{
	int i;
	int val;
	int valmax;
	
	i = n-1;
	val = 0;
	valmax = 9 - n + 1;
	while(comb[0] <= valmax) //Checks if 1st list position value is the last permitted
		ft_print_numbers(comb, n);
		while(0 <= i)
		{
			while(comb[i] <= 9)
			{
				comb[i]++;
				ft_putchar(',');
				ft_putchar(' ');
				ft_print_numbers(comb, n);
			}
			i--;
			comb[i]++;
			comb[i+1] = comb[i] + 1;
		}
}

void ft_print_combn(int n)
{
	int	i;
	int	comb[n];
	int val;

	i = 0;
	val = 0;
	while (n >= 1 && n < 10) //Checks if n is in Range
	{
		while (i < n) // List inicialization
		{
			comb[i] = val;
			i++;
			val++;
		}
		ft_get_number(comb, n);
	}
}

int main(void)
{
	ft_print_combn(4);
	return (0);
}
